/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  client?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "company";
  };
  services?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "service";
  }>;
  cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  brief?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  testimonials?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "testimonial";
  }>;
};

export type Career = {
  _id: string;
  _type: "career";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  position?: string;
  location?: string;
  basis?: string;
  brief?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  rating?: number;
  review?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  person?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  deliverables?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  footmark?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  subtitle?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  person?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  isTeamMember?: boolean;
  company?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "company";
  };
  title?: string;
  cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  website?: string;
  email?: string;
  socials?: Array<{
    url?: string;
    _type: "socialProfile";
    _key: string;
  }>;
};

export type Company = {
  _id: string;
  _type: "company";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  client?: boolean;
  slug?: Slug;
  industry?: string;
  website?: string;
  logo?: {
    white?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    black?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Project | Career | Testimonial | Service | Post | Author | Person | Company | Category | BlockContent | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries/author.ts
// Variable: AUTHORS_QUERY
// Query: *[_type == "author" && defined(slug.current)][0...12]{  _id,  slug,  name,  title,  image,}
export type AUTHORS_QUERYResult = Array<never>;
// Variable: AUTHOR_QUERY
// Query: *[_type == "author" && slug.current == $slug][0]{  _id,  slug,  name,  title,  socials,  website,  email,  image,  bio}
export type AUTHOR_QUERYResult = {
  _id: string;
  slug: null;
  name: null;
  title: null;
  socials: null;
  website: null;
  email: null;
  image: null;
  bio: null;
} | null;

// Source: ./src/sanity/lib/queries/career.ts
// Variable: CAREERS_QUERY
// Query: *[_type == "career"][0...12]{  _id,  position,  location,  basis,  brief,  body}
export type CAREERS_QUERYResult = Array<{
  _id: string;
  position: string | null;
  location: string | null;
  basis: string | null;
  brief: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
}>;
// Variable: CAREER_QUERY
// Query: *[_type == "career" && _id == $id][0]{  _id,  position,  location,  basis,  brief,  body}
export type CAREER_QUERYResult = {
  _id: string;
  position: string | null;
  location: string | null;
  basis: string | null;
  brief: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;

// Source: ./src/sanity/lib/queries/company.ts
// Variable: CLIENTS_QUERY
// Query: *[_type == "company" && client == true && defined(slug.current)][0...12]{  _id,  name,  client,  slug,  industry,  website,  logo}
export type CLIENTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  client: boolean | null;
  slug: Slug | null;
  industry: string | null;
  website: string | null;
  logo: {
    white?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    black?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
}>;

// Source: ./src/sanity/lib/queries/person.ts
// Variable: TEAM_MEMBERS_QUERY
// Query: *[_type == "person" && isTeamMember == true && defined(slug.current) ][0...12]{  _id,  slug,  name,  cover,  title,  isTeamMember}
export type TEAM_MEMBERS_QUERYResult = Array<{
  _id: string;
  slug: Slug | null;
  name: string | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  title: string | null;
  isTeamMember: boolean | null;
}>;
// Variable: TEAM_MEMBER_QUERY
// Query: *[_type == "person" && isTeamMember == true && slug.current == $slug][0]{  _id,  slug,  name,  cover,  title,  isTeamMember,  email,  website,  socials,  bio}
export type TEAM_MEMBER_QUERYResult = {
  _id: string;
  slug: Slug | null;
  name: string | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  title: string | null;
  isTeamMember: boolean | null;
  email: string | null;
  website: string | null;
  socials: Array<{
    url?: string;
    _type: "socialProfile";
    _key: string;
  }> | null;
  bio: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;

// Source: ./src/sanity/lib/queries/post.ts
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)][0...12]{  _id,  slug,  publishedAt,  title,  "cover": mainImage,  categories[]->,}
export type POSTS_QUERYResult = Array<{
  _id: string;
  slug: Slug | null;
  publishedAt: string | null;
  title: string | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  categories: Array<{
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
  }> | null;
}>;
// Variable: POSTS_BY_AUTHOR_QUERY
// Query: *[_type == "post" && defined(slug.current) && author->person->slug.current == $authorSlug][0...12]{  _id,  slug,  publishedAt,  title,  "cover": mainImage,  categories[]->,  "author": author->person->}
export type POSTS_BY_AUTHOR_QUERYResult = Array<{
  _id: string;
  slug: Slug | null;
  publishedAt: string | null;
  title: string | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  categories: Array<{
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
  }> | null;
  author: {
    _id: string;
    _type: "person";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    isTeamMember?: boolean;
    company?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "company";
    };
    title?: string;
    cover?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    website?: string;
    email?: string;
    socials?: Array<{
      url?: string;
      _type: "socialProfile";
      _key: string;
    }>;
  } | null;
}>;
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{  _id,  slug,  publishedAt,  title,  subtitle,  "cover": mainImage,  categories[]->,  "author": author->person->,  body}
export type POST_QUERYResult = {
  _id: string;
  slug: Slug | null;
  publishedAt: string | null;
  title: string | null;
  subtitle: string | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  categories: Array<{
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
  }> | null;
  author: {
    _id: string;
    _type: "person";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    isTeamMember?: boolean;
    company?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "company";
    };
    title?: string;
    cover?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    website?: string;
    email?: string;
    socials?: Array<{
      url?: string;
      _type: "socialProfile";
      _key: string;
    }>;
  } | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
} | null;
// Variable: NEXT_POSTS_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{  "next": *[    _type == "post" &&    defined(slug.current) &&    slug.current != $slug &&    coalesce(publishedAt, _createdAt) < coalesce(^.publishedAt, ^._createdAt)  ]  | order(coalesce(publishedAt, _createdAt) desc)[0...4]{    _id,    slug,    publishedAt,    title,    "cover": mainImage,    categories[]->,    "author": author->person->,    body  },  "initial": *[    _type == "post" &&    defined(slug.current) &&    slug.current != $slug &&    coalesce(publishedAt, _createdAt) > coalesce(^.publishedAt, ^._createdAt)  ]  | order(coalesce(publishedAt, _createdAt) desc)[0...4]{    _id,    slug,    publishedAt,    title,    "cover": mainImage,    categories[]->,    "author": author->person->,    body  },}
export type NEXT_POSTS_QUERYResult = {
  next: Array<{
    _id: string;
    slug: Slug | null;
    publishedAt: string | null;
    title: string | null;
    cover: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    categories: Array<{
      _id: string;
      _type: "category";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      slug?: Slug;
      description?: string;
    }> | null;
    author: {
      _id: string;
      _type: "person";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name?: string;
      slug?: Slug;
      isTeamMember?: boolean;
      company?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "company";
      };
      title?: string;
      cover?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      bio?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: never;
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      website?: string;
      email?: string;
      socials?: Array<{
        url?: string;
        _type: "socialProfile";
        _key: string;
      }>;
    } | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }> | null;
  }>;
  initial: Array<{
    _id: string;
    slug: Slug | null;
    publishedAt: string | null;
    title: string | null;
    cover: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    categories: Array<{
      _id: string;
      _type: "category";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      slug?: Slug;
      description?: string;
    }> | null;
    author: {
      _id: string;
      _type: "person";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name?: string;
      slug?: Slug;
      isTeamMember?: boolean;
      company?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "company";
      };
      title?: string;
      cover?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      bio?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: never;
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      website?: string;
      email?: string;
      socials?: Array<{
        url?: string;
        _type: "socialProfile";
        _key: string;
      }>;
    } | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }> | null;
  }>;
} | null;

// Source: ./src/sanity/lib/queries/project.ts
// Variable: PROJECTS_QUERY
// Query: *[_type == "project" && defined(slug.current)][0...12]{  _id,    slug,    title,    "client": client->,    "services": services[]->,    cover,    brief,    body,    "testimonials": testimonials[]->{      _id,      "person": person->{        name,        title,        "company": company->      },        review,        title,    },    }
export type PROJECTS_QUERYResult = Array<{
  _id: string;
  slug: Slug | null;
  title: string | null;
  client: {
    _id: string;
    _type: "company";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    client?: boolean;
    slug?: Slug;
    industry?: string;
    website?: string;
    logo?: {
      white?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      black?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
    };
  } | null;
  services: Array<{
    _id: string;
    _type: "service";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
    cover?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    deliverables?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    body?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    footmark?: string;
  }> | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  brief: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  testimonials: Array<{
    _id: string;
    person: {
      name: string | null;
      title: string | null;
      company: {
        _id: string;
        _type: "company";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name?: string;
        client?: boolean;
        slug?: Slug;
        industry?: string;
        website?: string;
        logo?: {
          white?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            media?: unknown;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
          };
          black?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            media?: unknown;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
          };
        };
      } | null;
    } | null;
    review: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    title: null;
  }> | null;
}>;
// Variable: PROJECT_QUERY
// Query: *[_type == "project" && slug.current == $slug][0]{  _id,    slug,    title,    "client": client->,    "services": services[]->,    cover,    brief,    body,    "testimonials": testimonials[]->{    _id,      "person": person->{        name,        title,        "company": company->      },        review,        title,    },    }
export type PROJECT_QUERYResult = {
  _id: string;
  slug: Slug | null;
  title: string | null;
  client: {
    _id: string;
    _type: "company";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    client?: boolean;
    slug?: Slug;
    industry?: string;
    website?: string;
    logo?: {
      white?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      black?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
    };
  } | null;
  services: Array<{
    _id: string;
    _type: "service";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
    cover?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    deliverables?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    body?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    footmark?: string;
  }> | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  brief: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  testimonials: Array<{
    _id: string;
    person: {
      name: string | null;
      title: string | null;
      company: {
        _id: string;
        _type: "company";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name?: string;
        client?: boolean;
        slug?: Slug;
        industry?: string;
        website?: string;
        logo?: {
          white?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            media?: unknown;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
          };
          black?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            media?: unknown;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
          };
        };
      } | null;
    } | null;
    review: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    title: null;
  }> | null;
} | null;

// Source: ./src/sanity/lib/queries/service.ts
// Variable: SERVICES_QUERY
// Query: *[_type == "service" && defined(slug.current)][0...12]{  _id,  title,  slug,  description,  cover,  deliverables}
export type SERVICES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  deliverables: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
}>;
// Variable: SERVICE_QUERY
// Query: *[_type == "service" && slug.current == $slug][0]{  _id,  title,  slug,  description,  cover,  deliverables,  body,  footmark}
export type SERVICE_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  deliverables: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  footmark: string | null;
} | null;

// Source: ./src/sanity/lib/queries/testimonial.ts
// Variable: TESTIMONIALS_QUERY
// Query: *[_type == "testimonial"][0...12]{  _id,  rating,  review,  "person": person -> {    slug,    name,    cover,    title,    "company": company -> {      slug,      name    }  }}
export type TESTIMONIALS_QUERYResult = Array<{
  _id: string;
  rating: number | null;
  review: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  person: {
    slug: Slug | null;
    name: string | null;
    cover: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    title: string | null;
    company: {
      slug: Slug | null;
      name: string | null;
    } | null;
  } | null;
}>;
// Variable: TESTIMONIAL_QUERY
// Query: *[_type == "testimonial" && slug.current == $slug][0]{  _id,  rating,  review,}
export type TESTIMONIAL_QUERYResult = {
  _id: string;
  rating: number | null;
  review: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"author\" && defined(slug.current)][0...12]{\n  _id,\n  slug,\n  name,\n  title,\n  image,\n}": AUTHORS_QUERYResult;
    "*[_type == \"author\" && slug.current == $slug][0]{\n  _id,\n  slug,\n  name,\n  title,\n  socials,\n  website,\n  email,\n  image,\n  bio\n}": AUTHOR_QUERYResult;
    "*[_type == \"career\"][0...12]{\n  _id,\n  position,\n  location,\n  basis,\n  brief,\n  body\n}": CAREERS_QUERYResult;
    "*[_type == \"career\" && _id == $id][0]{\n  _id,\n  position,\n  location,\n  basis,\n  brief,\n  body\n}": CAREER_QUERYResult;
    "*[_type == \"company\" && client == true && defined(slug.current)][0...12]{\n  _id,\n  name,\n  client,\n  slug,\n  industry,\n  website,\n  logo\n}": CLIENTS_QUERYResult;
    "*[_type == \"person\" && isTeamMember == true && defined(slug.current) ][0...12]{\n  _id,\n  slug,\n  name,\n  cover,\n  title,\n  isTeamMember\n}": TEAM_MEMBERS_QUERYResult;
    "*[_type == \"person\" && isTeamMember == true && slug.current == $slug][0]{\n  _id,\n  slug,\n  name,\n  cover,\n  title,\n  isTeamMember,\n  email,\n  website,\n  socials,\n  bio\n}": TEAM_MEMBER_QUERYResult;
    "*[_type == \"post\" && defined(slug.current)][0...12]{\n  _id,\n  slug,\n  publishedAt,\n  title,\n  \"cover\": mainImage,\n  categories[]->,\n}": POSTS_QUERYResult;
    "*[_type == \"post\" && defined(slug.current) && author->person->slug.current == $authorSlug][0...12]{\n  _id,\n  slug,\n  publishedAt,\n  title,\n  \"cover\": mainImage,\n  categories[]->,\n  \"author\": author->person->\n}": POSTS_BY_AUTHOR_QUERYResult;
    "*[_type == \"post\" && slug.current == $slug][0]{\n  _id,\n  slug,\n  publishedAt,\n  title,\n  subtitle,\n  \"cover\": mainImage,\n  categories[]->,\n  \"author\": author->person->,\n  body\n}": POST_QUERYResult;
    "*[_type == \"post\" && slug.current == $slug][0]{\n  \"next\": *[\n    _type == \"post\" &&\n    defined(slug.current) &&\n    slug.current != $slug &&\n    coalesce(publishedAt, _createdAt) < coalesce(^.publishedAt, ^._createdAt)\n  ]\n  | order(coalesce(publishedAt, _createdAt) desc)[0...4]{\n    _id,\n    slug,\n    publishedAt,\n    title,\n    \"cover\": mainImage,\n    categories[]->,\n    \"author\": author->person->,\n    body\n  },\n  \"initial\": *[\n    _type == \"post\" &&\n    defined(slug.current) &&\n    slug.current != $slug &&\n    coalesce(publishedAt, _createdAt) > coalesce(^.publishedAt, ^._createdAt)\n  ]\n  | order(coalesce(publishedAt, _createdAt) desc)[0...4]{\n    _id,\n    slug,\n    publishedAt,\n    title,\n    \"cover\": mainImage,\n    categories[]->,\n    \"author\": author->person->,\n    body\n  },\n}": NEXT_POSTS_QUERYResult;
    "*[_type == \"project\" && defined(slug.current)][0...12]{\n  _id,\n    slug,\n    title,\n    \"client\": client->,\n    \"services\": services[]->,\n    cover,\n    brief,\n    body,\n    \"testimonials\": testimonials[]->{\n      _id,\n      \"person\": person->{\n        name,\n        title,\n        \"company\": company->\n      },\n        review,\n        title,\n    },    \n}": PROJECTS_QUERYResult;
    "*[_type == \"project\" && slug.current == $slug][0]{\n  _id,\n    slug,\n    title,\n    \"client\": client->,\n    \"services\": services[]->,\n    cover,\n    brief,\n    body,\n    \"testimonials\": testimonials[]->{\n    _id,\n      \"person\": person->{\n        name,\n        title,\n        \"company\": company->\n      },\n        review,\n        title,\n    },    \n}": PROJECT_QUERYResult;
    "*[_type == \"service\" && defined(slug.current)][0...12]{\n  _id,\n  title,\n  slug,\n  description,\n  cover,\n  deliverables\n}": SERVICES_QUERYResult;
    "*[_type == \"service\" && slug.current == $slug][0]{\n  _id,\n  title,\n  slug,\n  description,\n  cover,\n  deliverables,\n  body,\n  footmark\n}": SERVICE_QUERYResult;
    "*[_type == \"testimonial\"][0...12]{\n  _id,\n  rating,\n  review,\n  \"person\": person -> {\n    slug,\n    name,\n    cover,\n    title,\n    \"company\": company -> {\n      slug,\n      name\n    }\n  }\n}": TESTIMONIALS_QUERYResult;
    "*[_type == \"testimonial\" && slug.current == $slug][0]{\n  _id,\n  rating,\n  review,\n}": TESTIMONIAL_QUERYResult;
  }
}
